#!/usr/bin/env python
import hashlib
import sys

if len(sys.argv) != 3:
    print("Usage: %s domain id id id id id id" % sys.argv[0])
    print("\nID is 6 two hex digit ")
    sys.exit(1)

if len(sys.argv[2]) != 6:
    print("A 6 digit instance ID is required")
    sys.exit(2)

domain = sys.argv[1]
instance_id = []
for i in sys.argv[2]:
    instance_id.append(ord(i))

message = [
        0x02,   # Flags length
        0x01,   # Flags data type value
        0x1a,   # Flags data

        0x03,   # Service UUID length
        0x03,   # Service UUID data type value
        0xaa,   # 16-bit Eddystone UUID
        0xfe,   # 16-bit Eddystone UUID

        0x24,   # Service Data length
        0x16,   # Service Data data type value
        0xaa,   # 16-bit Eddystone UUID
        0xfe,   # 16-bit Eddystone UUID

        0x00,   # Eddystone-uid frame type
        0xed,   # txpower
]

# The UID consists of two parts: a 10 byte namespace and a 6 byte identifier. The 10 byte namespace
# is generated by taking the sha1 of our domain and using the first 10 bytes.
domain_hash = hashlib.sha1()
domain_hash.update(domain)
for byte in domain_hash.hexdigest()[:10]:
    message.append(ord(byte))

message += instance_id

message += [0x00, 0x00]  # Reversed for future use, must be 0x00 0x00 for now

message.insert(0, len(message))

while len(message) < 32:
    message.append(0x00)

message = map(lambda x: "%02x" % x, message)

print(" ".join(message))
